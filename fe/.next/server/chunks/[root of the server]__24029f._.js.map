{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/app/api/bot/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { spawn } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\n// Store bot process IDs\nlet botProcesses: Record<string, { process: any; running: boolean }> = {\n  azbit: { process: null, running: false },\n  p2pb2b: { process: null, running: false }\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { action, botId } = await request.json();\n\n    if (!botId || !['azbit', 'p2pb2b'].includes(botId)) {\n      return NextResponse.json({ success: false, error: 'Invalid bot ID' }, { status: 400 });\n    }\n\n    if (!action || !['start', 'stop'].includes(action)) {\n      return NextResponse.json({ success: false, error: 'Invalid action' }, { status: 400 });\n    }\n\n    // Get the root directory (outside of /fe)\n    const rootDir = process.cwd().replace(/\\\\fe$/, '');\n\n    if (action === 'start') {\n      // Check if bot is already running\n      if (botProcesses[botId].running) {\n        return NextResponse.json({ success: false, error: 'Bot is already running' }, { status: 400 });\n      }\n\n      // Determine which script to run based on botId\n      const scriptPath = botId === 'azbit' ? 'index.js' : 'index2.js';\n      const fullScriptPath = path.join(rootDir, scriptPath);\n\n      // Check if the script exists\n      if (!fs.existsSync(fullScriptPath)) {\n        return NextResponse.json({ \n          success: false, \n          error: `Script ${scriptPath} not found` \n        }, { status: 404 });\n      }\n\n      try {\n        // Start the bot process detached so it continues running after the API request completes\n        const process = spawn('node', [scriptPath], {\n          cwd: rootDir,\n          detached: true,\n          stdio: 'ignore',\n          windowsHide: true\n        });\n\n        // Unref the process to allow the Node.js event loop to exit even if the process is still running\n        process.unref();\n\n        // Store the process reference\n        botProcesses[botId] = {\n          process: process,\n          running: true\n        };\n\n        // Create a marker file to indicate the bot is running\n        fs.writeFileSync(path.join(rootDir, `${botId}-running.txt`), 'running');\n\n        return NextResponse.json({ \n          success: true, \n          message: `${botId} bot started successfully`,\n          pid: process.pid\n        });\n      } catch (error) {\n        console.error(`Error starting ${botId} bot:`, error);\n        return NextResponse.json({ \n          success: false, \n          error: `Failed to start ${botId} bot: ${error instanceof Error ? error.message : 'Unknown error'}`\n        }, { status: 500 });\n      }\n    } else if (action === 'stop') {\n      // Check if bot is running based on marker file\n      const markerFile = path.join(rootDir, `${botId}-running.txt`);\n      const isRunning = fs.existsSync(markerFile);\n\n      if (!isRunning) {\n        return NextResponse.json({ success: false, error: 'Bot is not running' }, { status: 400 });\n      }\n\n      try {\n        // If we have a process reference, try to kill it\n        if (botProcesses[botId].process) {\n          // On Windows, we need to use taskkill to kill the process tree\n          if (process.platform === 'win32') {\n            spawn('taskkill', ['/pid', botProcesses[botId].process.pid.toString(), '/f', '/t']);\n          } else {\n            process.kill(-botProcesses[botId].process.pid); // Negative PID kills the process group\n          }\n        }\n\n        // Remove the marker file\n        fs.unlinkSync(markerFile);\n\n        // Update the process status\n        botProcesses[botId] = {\n          process: null,\n          running: false\n        };\n\n        return NextResponse.json({ \n          success: true, \n          message: `${botId} bot stopped successfully` \n        });\n      } catch (error) {\n        console.error(`Error stopping ${botId} bot:`, error);\n        \n        // Even if there's an error, try to remove the marker file and update status\n        try {\n          if (fs.existsSync(markerFile)) {\n            fs.unlinkSync(markerFile);\n          }\n          botProcesses[botId].running = false;\n        } catch (e) {\n          console.error('Error cleaning up after failed stop:', e);\n        }\n\n        return NextResponse.json({ \n          success: false, \n          error: `Failed to stop ${botId} bot: ${error instanceof Error ? error.message : 'Unknown error'}`\n        }, { status: 500 });\n      }\n    }\n\n    return NextResponse.json({ success: false, error: 'Invalid request' }, { status: 400 });\n  } catch (error: any) {\n    console.error('Error handling bot action:', error);\n    return NextResponse.json({ \n      success: false, \n      error: error.message || 'An error occurred' \n    }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const url = new URL(request.url);\n    const botId = url.searchParams.get('botId');\n    \n    if (!botId || !['azbit', 'p2pb2b'].includes(botId)) {\n      return NextResponse.json({ success: false, error: 'Invalid bot ID' }, { status: 400 });\n    }\n    \n    // Check if the marker file exists to determine if the bot is running\n    const rootDir = process.cwd().replace(/\\\\fe$/, '');\n    const markerFile = path.join(rootDir, `${botId}-running.txt`);\n    const isRunning = fs.existsSync(markerFile);\n    \n    // Update our in-memory state to match the file system\n    botProcesses[botId].running = isRunning;\n    \n    return NextResponse.json({ \n      success: true, \n      data: {\n        running: isRunning\n      }\n    });\n  } catch (error: any) {\n    console.error('Error getting bot status:', error);\n    return NextResponse.json({ \n      success: false, \n      error: error.message || 'An error occurred' \n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
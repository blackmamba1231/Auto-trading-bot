{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/app/api/bot/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execPromise = promisify(exec);\n\n// Store bot process IDs\nlet botProcesses: Record<string, { pid: number | null; running: boolean }> = {\n  azbit: { pid: null, running: false },\n  p2pb2b: { pid: null, running: false }\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { action, botId } = await request.json();\n\n    if (!botId || !['azbit', 'p2pb2b'].includes(botId)) {\n      return NextResponse.json({ success: false, error: 'Invalid bot ID' }, { status: 400 });\n    }\n\n    if (!action || !['start', 'stop'].includes(action)) {\n      return NextResponse.json({ success: false, error: 'Invalid action' }, { status: 400 });\n    }\n\n    if (action === 'start') {\n      // Check if bot is already running\n      if (botProcesses[botId].running) {\n        return NextResponse.json({ success: false, error: 'Bot is already running' }, { status: 400 });\n      }\n\n      // Determine which script to run based on botId\n      const scriptPath = botId === 'azbit' ? 'index.js' : 'index2.js';\n      \n      // Start the bot process\n      const { stdout, stderr } = await execPromise(`node ${scriptPath}`, {\n        cwd: process.cwd().replace(/\\\\fe$/, '') // Go up one directory if in 'fe' folder\n      });\n      \n      // In a real implementation, we would store the process ID\n      // For now, we'll just mark it as running\n      botProcesses[botId].running = true;\n      \n      return NextResponse.json({ \n        success: true, \n        message: `${botId} bot started successfully`,\n        stdout,\n        stderr\n      });\n    } else if (action === 'stop') {\n      // Check if bot is running\n      if (!botProcesses[botId].running) {\n        return NextResponse.json({ success: false, error: 'Bot is not running' }, { status: 400 });\n      }\n      \n      // In a real implementation, we would gracefully stop the bot\n      // For now, we'll just mark it as not running\n      botProcesses[botId].running = false;\n      \n      return NextResponse.json({ \n        success: true, \n        message: `${botId} bot stopped successfully` \n      });\n    }\n\n    return NextResponse.json({ success: false, error: 'Invalid request' }, { status: 400 });\n  } catch (error: any) {\n    console.error('Error handling bot action:', error);\n    return NextResponse.json({ \n      success: false, \n      error: error.message || 'An error occurred' \n    }, { status: 500 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const url = new URL(request.url);\n    const botId = url.searchParams.get('botId');\n    \n    if (!botId || !['azbit', 'p2pb2b'].includes(botId)) {\n      return NextResponse.json({ success: false, error: 'Invalid bot ID' }, { status: 400 });\n    }\n    \n    return NextResponse.json({ \n      success: true, \n      data: {\n        running: botProcesses[botId].running\n      }\n    });\n  } catch (error: any) {\n    console.error('Error getting bot status:', error);\n    return NextResponse.json({ \n      success: false, \n      error: error.message || 'An error occurred' \n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
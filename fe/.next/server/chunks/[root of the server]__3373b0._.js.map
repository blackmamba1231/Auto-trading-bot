{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/app/api/settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport jwt from 'jsonwebtoken';\n\n// Use environment variable for JWT secret\nconst JWT_SECRET = process.env.NEXT_PUBLIC_JWT_SECRET || 'super121';\n\n// Define type for decoded JWT token\ninterface DecodedToken {\n  username: string;\n  iat: number;\n  exp: number;\n}\n\n// Helper function to verify JWT token\nconst verifyToken = (token: string): DecodedToken | null => {\n  try {\n    return jwt.verify(token, JWT_SECRET) as DecodedToken;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n};\n\n// Helper function to check authentication\nconst checkAuth = (request: NextRequest): boolean => {\n  // For browser requests, check Authorization header\n  const authHeader = request.headers.get('Authorization');\n  if (authHeader && authHeader.startsWith('Bearer ')) {\n    const token = authHeader.split(' ')[1];\n    const decoded = verifyToken(token);\n    if (decoded) {\n      return true;\n    }\n  }\n  \n  return false;\n};\n\n// Define API keys interface\ninterface ApiKeys {\n  azbit: {\n    apiKey: string;\n    apiSecret: string;\n  };\n  p2pb2b: {\n    apiKey: string;\n    apiSecret: string;\n  };\n}\n\n// Path to the settings file\nconst getSettingsFilePath = () => {\n  const rootDir = process.cwd().replace(/\\\\fe$/, '');\n  return path.join(rootDir, 'api-settings.json');\n};\n\n// Default API keys (from environment variables or fallback to empty)\nconst getDefaultApiKeys = (): ApiKeys => {\n  return {\n    azbit: {\n      apiKey: process.env.AZBIT_API_KEY || '',\n      apiSecret: process.env.AZBIT_API_SECRET || ''\n    },\n    p2pb2b: {\n      apiKey: process.env.P2PB2B_API_KEY || '',\n      apiSecret: process.env.P2PB2B_API_SECRET || ''\n    }\n  };\n};\n\n// Load API keys from settings file or use defaults\nconst loadApiKeys = async (): Promise<ApiKeys> => {\n  try {\n    const filePath = getSettingsFilePath();\n    const fileExists = await fs.stat(filePath).then(() => true).catch(() => false);\n    \n    if (fileExists) {\n      const data = await fs.readFile(filePath, 'utf8');\n      return JSON.parse(data);\n    }\n  } catch (error) {\n    console.error('Error loading API keys:', error);\n  }\n  \n  // Return default keys if file doesn't exist or there's an error\n  return getDefaultApiKeys();\n};\n\n// Save API keys to settings file\nconst saveApiKeys = async (apiKeys: ApiKeys): Promise<boolean> => {\n  try {\n    const filePath = getSettingsFilePath();\n    await fs.writeFile(filePath, JSON.stringify(apiKeys, null, 2), 'utf8');\n    return true;\n  } catch (error) {\n    console.error('Error saving API keys:', error);\n    return false;\n  }\n};\n\n// GET endpoint to retrieve current API keys\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authentication\n    if (!checkAuth(request)) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    const apiKeys = await loadApiKeys();\n    \n    // Mask secrets for security\n    const maskedApiKeys = {\n      azbit: {\n        apiKey: apiKeys.azbit.apiKey,\n        apiSecret: apiKeys.azbit.apiSecret ? '••••••••••••••••' : ''\n      },\n      p2pb2b: {\n        apiKey: apiKeys.p2pb2b.apiKey,\n        apiSecret: apiKeys.p2pb2b.apiSecret ? '••••••••••••••••' : ''\n      }\n    };\n    \n    return NextResponse.json({\n      success: true,\n      data: maskedApiKeys\n    });\n  } catch (error) {\n    console.error('Error getting API keys:', error);\n    return NextResponse.json({ \n      success: false, \n      error: 'An error occurred while retrieving API keys'\n    }, { status: 500 });\n  }\n}\n\n// POST endpoint to update API keys\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    if (!checkAuth(request)) {\n      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    const body = await request.json();\n    const { apiKeys } = body;\n    \n    if (!apiKeys || !apiKeys.azbit || !apiKeys.p2pb2b) {\n      return NextResponse.json({ \n        success: false, \n        error: 'Invalid API keys format'\n      }, { status: 400 });\n    }\n    \n    // Load current API keys to preserve secrets if they weren't changed (masked)\n    const currentApiKeys = await loadApiKeys();\n    \n    // Only update secrets if they were actually changed (not masked)\n    const updatedApiKeys: ApiKeys = {\n      azbit: {\n        apiKey: apiKeys.azbit.apiKey,\n        apiSecret: apiKeys.azbit.apiSecret === '••••••••••••••••' \n          ? currentApiKeys.azbit.apiSecret \n          : apiKeys.azbit.apiSecret\n      },\n      p2pb2b: {\n        apiKey: apiKeys.p2pb2b.apiKey,\n        apiSecret: apiKeys.p2pb2b.apiSecret === '••••••••••••••••' \n          ? currentApiKeys.p2pb2b.apiSecret \n          : apiKeys.p2pb2b.apiSecret\n      }\n    };\n    \n    const success = await saveApiKeys(updatedApiKeys);\n    \n    if (success) {\n      return NextResponse.json({\n        success: true,\n        message: 'API keys updated successfully'\n      });\n    } else {\n      return NextResponse.json({ \n        success: false, \n        error: 'Failed to save API keys'\n      }, { status: 500 });\n    }\n  } catch (error) {\n    console.error('Error updating API keys:', error);\n    return NextResponse.json({ \n      success: false, \n      error: 'An error occurred while updating API keys'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,0CAA0C;AAC1C,MAAM,aAAa,gDAAsC;AASzD,sCAAsC;AACtC,MAAM,cAAc,CAAC;IACnB,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT;AACF;AAEA,0CAA0C;AAC1C,MAAM,YAAY,CAAC;IACjB,mDAAmD;IACnD,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IACvC,IAAI,cAAc,WAAW,UAAU,CAAC,YAAY;QAClD,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;QACtC,MAAM,UAAU,YAAY;QAC5B,IAAI,SAAS;YACX,OAAO;QACT;IACF;IAEA,OAAO;AACT;AAcA,4BAA4B;AAC5B,MAAM,sBAAsB;IAC1B,MAAM,UAAU,QAAQ,GAAG,GAAG,OAAO,CAAC,SAAS;IAC/C,OAAO,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,SAAS;AAC5B;AAEA,qEAAqE;AACrE,MAAM,oBAAoB;IACxB,OAAO;QACL,OAAO;YACL,QAAQ,QAAQ,GAAG,CAAC,aAAa,IAAI;YACrC,WAAW,QAAQ,GAAG,CAAC,gBAAgB,IAAI;QAC7C;QACA,QAAQ;YACN,QAAQ,QAAQ,GAAG,CAAC,cAAc,IAAI;YACtC,WAAW,QAAQ,GAAG,CAAC,iBAAiB,IAAI;QAC9C;IACF;AACF;AAEA,mDAAmD;AACnD,MAAM,cAAc;IAClB,IAAI;QACF,MAAM,WAAW;QACjB,MAAM,aAAa,MAAM,qHAAA,CAAA,UAAE,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAM,MAAM,KAAK,CAAC,IAAM;QAExE,IAAI,YAAY;YACd,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,UAAU;YACzC,OAAO,KAAK,KAAK,CAAC;QACpB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;IAC3C;IAEA,gEAAgE;IAChE,OAAO;AACT;AAEA,iCAAiC;AACjC,MAAM,cAAc,OAAO;IACzB,IAAI;QACF,MAAM,WAAW;QACjB,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,SAAS,MAAM,IAAI;QAC/D,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO;IACT;AACF;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,uBAAuB;QACvB,IAAI,CAAC,UAAU,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,UAAU,MAAM;QAEtB,4BAA4B;QAC5B,MAAM,gBAAgB;YACpB,OAAO;gBACL,QAAQ,QAAQ,KAAK,CAAC,MAAM;gBAC5B,WAAW,QAAQ,KAAK,CAAC,SAAS,GAAG,qBAAqB;YAC5D;YACA,QAAQ;gBACN,QAAQ,QAAQ,MAAM,CAAC,MAAM;gBAC7B,WAAW,QAAQ,MAAM,CAAC,SAAS,GAAG,qBAAqB;YAC7D;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,uBAAuB;QACvB,IAAI,CAAC,UAAU,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,GAAG;QAEpB,IAAI,CAAC,WAAW,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,MAAM,EAAE;YACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;QAEA,6EAA6E;QAC7E,MAAM,iBAAiB,MAAM;QAE7B,iEAAiE;QACjE,MAAM,iBAA0B;YAC9B,OAAO;gBACL,QAAQ,QAAQ,KAAK,CAAC,MAAM;gBAC5B,WAAW,QAAQ,KAAK,CAAC,SAAS,KAAK,qBACnC,eAAe,KAAK,CAAC,SAAS,GAC9B,QAAQ,KAAK,CAAC,SAAS;YAC7B;YACA,QAAQ;gBACN,QAAQ,QAAQ,MAAM,CAAC,MAAM;gBAC7B,WAAW,QAAQ,MAAM,CAAC,SAAS,KAAK,qBACpC,eAAe,MAAM,CAAC,SAAS,GAC/B,QAAQ,MAAM,CAAC,SAAS;YAC9B;QACF;QAEA,MAAM,UAAU,MAAM,YAAY;QAElC,IAAI,SAAS;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX;QACF,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT,GAAG;gBAAE,QAAQ;YAAI;QACnB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
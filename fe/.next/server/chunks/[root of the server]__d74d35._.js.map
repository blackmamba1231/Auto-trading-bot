{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\n// In a real application, you would store this in an environment variable\nconst JWT_SECRET = process.env.NEXT_PUBLIC_JWT_SECRET || 'default-secret-key';\n\n// Hardcoded credentials for a single user\n// In a real application, you would use a database and proper password hashing\nconst VALID_USERNAME = process.env.NEXT_PUBLIC_VALID_USERNAME || 'admin';\nconst VALID_PASSWORD = process.env.NEXT_PUBLIC_VALID_PASSWORD || 'tradingbot123';\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('Login API called');\n    console.log('Expected credentials from env:', { \n      username: VALID_USERNAME,\n      password_length: VALID_PASSWORD ? VALID_PASSWORD.length : 0,\n      jwt_secret: JWT_SECRET\n    });\n    \n    const body = await request.json();\n    const { username, password } = body;\n    console.log('Login attempt:', { \n      username,\n      password_length: password ? password.length : 0,\n      matches_username: username === VALID_USERNAME,\n      matches_password: password === VALID_PASSWORD\n    });\n\n    // Validate credentials\n    if (username !== VALID_USERNAME || password !== VALID_PASSWORD) {\n      console.log('Invalid credentials');\n      return NextResponse.json(\n        { success: false, error: 'Invalid username or password' },\n        { status: 401 }\n      );\n    }\n\n    console.log('Credentials valid, generating token');\n    // Create a JWT token\n    const token = jwt.sign(\n      { \n        username,\n        // Add any additional user data you want to include in the token\n        role: 'admin'\n      },\n      JWT_SECRET,\n      { expiresIn: '24h' } // Token expires in 24 hours\n    );\n\n    console.log('Token generated successfully');\n    // Return the token\n    return NextResponse.json({ \n      success: true, \n      token,\n      message: 'Login successful',\n      redirectUrl: '/' // Include the redirect URL in the response\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { success: false, error: 'An error occurred during login' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,yEAAyE;AACzE,MAAM,aAAa,gDAAsC;AAEzD,0CAA0C;AAC1C,8EAA8E;AAC9E,MAAM,iBAAiB,6CAA0C;AACjE,MAAM,iBAAiB,sDAA0C;AAE1D,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,kCAAkC;YAC5C,UAAU;YACV,iBAAiB,uCAAiB,eAAe,MAAM;YACvD,YAAY;QACd;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAC/B,QAAQ,GAAG,CAAC,kBAAkB;YAC5B;YACA,iBAAiB,WAAW,SAAS,MAAM,GAAG;YAC9C,kBAAkB,aAAa;YAC/B,kBAAkB,aAAa;QACjC;QAEA,uBAAuB;QACvB,IAAI,aAAa,kBAAkB,aAAa,gBAAgB;YAC9D,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA+B,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;QACZ,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YACE;YACA,gEAAgE;YAChE,MAAM;QACR,GACA,YACA;YAAE,WAAW;QAAM,EAAE,4BAA4B;;QAGnD,QAAQ,GAAG,CAAC;QACZ,mBAAmB;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,SAAS;YACT,aAAa,IAAI,2CAA2C;QAC9D;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAiC,GAC1D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\n// Secret key for JWT verification\nconst JWT_SECRET = 'your-secret-key-for-trading-bot-authentication';\n\n// Routes that don't require authentication\nconst publicRoutes = ['/login', '/api/auth/login'];\n\n// Routes that are API endpoints and need token verification\nconst apiRoutes = ['/api/bot', '/api/bot-data'];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // Skip middleware for Next.js assets, public files, etc.\n  if (\n    pathname.startsWith('/_next') || \n    pathname.startsWith('/static') || \n    pathname.includes('/favicon.ico') || \n    pathname.includes('/robots.txt')\n  ) {\n    return NextResponse.next();\n  }\n  \n  // Allow public routes\n  if (publicRoutes.some(route => pathname.startsWith(route))) {\n    return NextResponse.next();\n  }\n  \n  // Check for API routes that need token verification\n  if (apiRoutes.some(route => pathname.startsWith(route))) {\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    const token = authHeader.split(' ')[1];\n    \n    try {\n      // Verify the token\n      jwt.verify(token, JWT_SECRET);\n      \n      // Continue to the API route if token is valid\n      return NextResponse.next();\n    } catch (error) {\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n  }\n  \n  // For browser requests to protected pages, we'll redirect to login\n  // Client-side code will handle checking localStorage for the token\n  \n  // Redirect to login if not authenticated\n  const url = request.nextUrl.clone();\n  url.pathname = '/login';\n  return NextResponse.redirect(url);\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones we explicitly handle\n     * in the middleware function\n     */\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIA,kCAAkC;AAClC,MAAM,aAAa;AAEnB,2CAA2C;AAC3C,MAAM,eAAe;IAAC;IAAU;CAAkB;AAElD,4DAA4D;AAC5D,MAAM,YAAY;IAAC;IAAY;CAAgB;AAExC,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,yDAAyD;IACzD,IACE,SAAS,UAAU,CAAC,aACpB,SAAS,UAAU,CAAC,cACpB,SAAS,QAAQ,CAAC,mBAClB,SAAS,QAAQ,CAAC,gBAClB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,sBAAsB;IACtB,IAAI,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QAC1D,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,oDAAoD;IACpD,IAAI,UAAU,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QACvD,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAe,GACxB;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;QAEtC,IAAI;YACF,mBAAmB;YACnB,qIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;YAElB,8CAA8C;YAC9C,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;QAC1B,EAAE,OAAO,OAAO;YACd,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgB,GACzB;gBAAE,QAAQ;YAAI;QAElB;IACF;IAEA,mEAAmE;IACnE,mEAAmE;IAEnE,yCAAyC;IACzC,MAAM,MAAM,QAAQ,OAAO,CAAC,KAAK;IACjC,IAAI,QAAQ,GAAG;IACf,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;AAC/B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;KAGC,GACD;KACD;AACH"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\n// Routes that are API endpoints and need token verification\nconst protectedApiRoutes = ['/api/bot', '/api/bot-data', '/api/settings'];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  console.log('Middleware processing path:', pathname);\n  \n  // Skip middleware for Next.js assets, public files, etc.\n  if (\n    pathname.startsWith('/_next') || \n    pathname.includes('favicon.ico') || \n    pathname.includes('robots.txt')\n  ) {\n    return NextResponse.next();\n  }\n  \n  // Only check API routes that need token verification\n  if (protectedApiRoutes.some(route => pathname.startsWith(route))) {\n    console.log('Protected route detected:', pathname);\n    const authHeader = request.headers.get('Authorization');\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      console.log('Missing or invalid Authorization header');\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n    \n    // For simplicity, we'll just check if a token exists\n    // In a real app, you would verify the token\n    const token = authHeader.split(' ')[1];\n    \n    if (!token) {\n      console.log('Empty token in Authorization header');\n      return NextResponse.json(\n        { error: 'Invalid token' },\n        { status: 401 }\n      );\n    }\n    \n    console.log('Valid token found, proceeding with request');\n  }\n  \n  // For all other routes, let the client handle authentication\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    // Only match API routes that need protection\n    '/api/bot/:path*',\n    '/api/bot-data/:path*',\n    '/api/settings/:path*'\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,4DAA4D;AAC5D,MAAM,qBAAqB;IAAC;IAAY;IAAiB;CAAgB;AAElE,eAAe,WAAW,OAAoB;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,QAAQ,GAAG,CAAC,+BAA+B;IAE3C,yDAAyD;IACzD,IACE,SAAS,UAAU,CAAC,aACpB,SAAS,QAAQ,CAAC,kBAClB,SAAS,QAAQ,CAAC,eAClB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,qDAAqD;IACrD,IAAI,mBAAmB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC,SAAS;QAChE,QAAQ,GAAG,CAAC,6BAA6B;QACzC,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,QAAQ,GAAG,CAAC;YACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAe,GACxB;gBAAE,QAAQ;YAAI;QAElB;QAEA,qDAAqD;QACrD,4CAA4C;QAC5C,MAAM,QAAQ,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;QAEtC,IAAI,CAAC,OAAO;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgB,GACzB;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC;IACd;IAEA,6DAA6D;IAC7D,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,6CAA6C;QAC7C;QACA;QACA;KACD;AACH"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
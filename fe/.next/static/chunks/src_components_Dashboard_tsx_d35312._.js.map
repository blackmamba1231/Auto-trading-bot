{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/components/Dashboard.tsx"],"sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\ninterface OrderBookData {\n  lowestSell: number;\n  highestBuy: number;\n  spread: number;\n  lastOrderType: 'buy' | 'sell' | null;\n}\n\ninterface TradeData {\n  time: string;\n  lowestSell: number;\n  highestBuy: number;\n  spread: number;\n}\n\ninterface BalanceCardProps {\n  title: string;\n  amount: number;\n  currency: string;\n}\n\nconst BalanceCard: React.FC<BalanceCardProps> = ({ title, amount, currency }) => (\n  <motion.div\n    whileHover={{ scale: 1.02 }}\n    className=\"bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl p-6 shadow-lg\"\n  >\n    <h3 className=\"text-white text-lg font-medium\">{title}</h3>\n    <p className=\"text-white text-2xl font-bold mt-2\">\n      {amount.toFixed(currency === 'BTC' ? 8 : 2)} {currency}\n    </p>\n  </motion.div>\n);\n\nconst Dashboard: React.FC = () => {\n  const [orderBook, setOrderBook] = React.useState<OrderBookData>({\n    lowestSell: 0,\n    highestBuy: 0,\n    spread: 0,\n    lastOrderType: null\n  });\n  const [tradeHistory, setTradeHistory] = React.useState<TradeData[]>([]);\n  const [balance, setBalance] = React.useState({\n    btc: 0,\n    usdt: 0,\n  });\n\n  // Simulated data fetch - replace with actual API calls\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // This should be replaced with actual API calls to your bot's endpoints\n        const mockData = {\n          lowestSell: 45000,\n          highestBuy: 44800,\n          spread: 200,\n          lastOrderType: 'buy' as const\n        };\n        setOrderBook(mockData);\n\n        // Mock trade history\n        const history = Array.from({ length: 6 }, (_, i) => ({\n          time: new Date(Date.now() - i * 3600000).toLocaleTimeString(),\n          lowestSell: 45000 + Math.random() * 1000,\n          highestBuy: 44800 + Math.random() * 1000,\n          spread: 200 + Math.random() * 50\n        })).reverse();\n        setTradeHistory(history);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 30000); // Update every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"p-6 space-y-6\"\n    >\n      {/* Trading Pair Info */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">BTCR/USDT</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-green-100 dark:bg-green-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-green-800 dark:text-green-200\">Lowest Sell</p>\n            <p className=\"text-2xl font-bold text-green-800 dark:text-green-200\">${orderBook.lowestSell.toFixed(2)}</p>\n          </div>\n          <div className=\"bg-red-100 dark:bg-red-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-red-800 dark:text-red-200\">Highest Buy</p>\n            <p className=\"text-2xl font-bold text-red-800 dark:text-red-200\">${orderBook.highestBuy.toFixed(2)}</p>\n          </div>\n          <div className=\"bg-blue-100 dark:bg-blue-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-200\">Spread</p>\n            <p className=\"text-2xl font-bold text-blue-800 dark:text-blue-200\">${orderBook.spread.toFixed(2)}</p>\n          </div>\n        </div>\n        <div className=\"mt-4 p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg\">\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Last Order Type: <span className=\"font-bold capitalize\">{orderBook.lastOrderType || 'None'}</span>\n          </p>\n        </div>\n      </div>\n\n      {/* Price History Chart */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">Price History</h2>\n        <div className=\"h-[400px] w-full\">\n          <ResponsiveContainer>\n            <LineChart data={tradeHistory}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" />\n              <YAxis stroke=\"#9CA3AF\" />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: 'none',\n                  borderRadius: '8px',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                name=\"Lowest Sell\"\n                dataKey=\"lowestSell\"\n                stroke=\"#10B981\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n              <Line\n                type=\"monotone\"\n                name=\"Highest Buy\"\n                dataKey=\"highestBuy\"\n                stroke=\"#EF4444\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n              <Line\n                type=\"monotone\"\n                name=\"Spread\"\n                dataKey=\"spread\"\n                stroke=\"#3B82F6\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Volume Range Settings */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">Bot Settings</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">Volume Range</p>\n            <p className=\"text-lg font-bold text-gray-800 dark:text-white\">1 - 2 BTCR</p>\n          </div>\n          <div className=\"p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-300\">Time Range</p>\n            <p className=\"text-lg font-bold text-gray-800 dark:text-white\">1 - 15 minutes</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Balance Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <BalanceCard title=\"BTC Balance\" amount={balance.btc} currency=\"BTC\" />\n        <BalanceCard title=\"USDT Balance\" amount={balance.usdt} currency=\"USDT\" />\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Dashboard;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
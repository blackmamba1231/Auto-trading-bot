{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/components/BotControlPanel.tsx"],"sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\n\nexport interface BotControlPanelProps {\n  botName: string;\n  botId: string;\n  isRunning: boolean;\n  isLoading?: boolean;\n  onStart: () => void;\n  onStop: () => void;\n}\n\nconst BotControlPanel: React.FC<BotControlPanelProps> = ({\n  botName,\n  isRunning,\n  isLoading = false,\n  onStart,\n  onStop\n}) => {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\n    >\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold text-gray-800 dark:text-white\">{botName}</h2>\n        <div className=\"flex items-center\">\n          <span className={`inline-block w-3 h-3 rounded-full mr-2 ${isRunning ? 'bg-green-500' : 'bg-red-500'}`}></span>\n          <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">\n            {isRunning ? 'Running' : 'Stopped'}\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"flex space-x-4\">\n        <button\n          onClick={onStart}\n          disabled={isRunning || isLoading}\n          className={`flex-1 py-2 px-4 rounded-md text-white font-medium transition-colors ${\n            isRunning || isLoading\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-green-500 hover:bg-green-600'\n          }`}\n        >\n          {isLoading ? (\n            <span className=\"flex items-center justify-center\">\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Starting...\n            </span>\n          ) : (\n            'Start Bot'\n          )}\n        </button>\n        \n        <button\n          onClick={onStop}\n          disabled={!isRunning || isLoading}\n          className={`flex-1 py-2 px-4 rounded-md text-white font-medium transition-colors ${\n            !isRunning || isLoading\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-red-500 hover:bg-red-600'\n          }`}\n        >\n          {isLoading ? (\n            <span className=\"flex items-center justify-center\">\n              <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Stopping...\n            </span>\n          ) : (\n            'Stop Bot'\n          )}\n        </button>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default BotControlPanel;\n"],"names":[],"mappings":";;;;AACA;;;AAWA,MAAM,kBAAkD,CAAC,EACvD,OAAO,EACP,SAAS,EACT,YAAY,KAAK,EACjB,OAAO,EACP,MAAM,EACP;IACC,qBACE,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;QACT,SAAS;YAAE,SAAS;YAAG,GAAG;QAAG;QAC7B,SAAS;YAAE,SAAS;YAAG,GAAG;QAAE;QAC5B,YAAY;YAAE,UAAU;QAAI;QAC5B,WAAU;;0BAEV,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAmD;;;;;;kCACjE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAK,WAAW,CAAC,uCAAuC,EAAE,YAAY,iBAAiB,cAAc;;;;;;0CACtG,6LAAC;gCAAK,WAAU;0CACb,YAAY,YAAY;;;;;;;;;;;;;;;;;;0BAK/B,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,SAAS;wBACT,UAAU,aAAa;wBACvB,WAAW,CAAC,qEAAqE,EAC/E,aAAa,YACT,mCACA,mCACJ;kCAED,0BACC,6LAAC;4BAAK,WAAU;;8CACd,6LAAC;oCAAI,WAAU;oCAA6C,OAAM;oCAA6B,MAAK;oCAAO,SAAQ;;sDACjH,6LAAC;4CAAO,WAAU;4CAAa,IAAG;4CAAK,IAAG;4CAAK,GAAE;4CAAK,QAAO;4CAAe,aAAY;;;;;;sDACxF,6LAAC;4CAAK,WAAU;4CAAa,MAAK;4CAAe,GAAE;;;;;;;;;;;;gCAC/C;;;;;;mCAIR;;;;;;kCAIJ,6LAAC;wBACC,SAAS;wBACT,UAAU,CAAC,aAAa;wBACxB,WAAW,CAAC,qEAAqE,EAC/E,CAAC,aAAa,YACV,mCACA,+BACJ;kCAED,0BACC,6LAAC;4BAAK,WAAU;;8CACd,6LAAC;oCAAI,WAAU;oCAA6C,OAAM;oCAA6B,MAAK;oCAAO,SAAQ;;sDACjH,6LAAC;4CAAO,WAAU;4CAAa,IAAG;4CAAK,IAAG;4CAAK,GAAE;4CAAK,QAAO;4CAAe,aAAY;;;;;;sDACxF,6LAAC;4CAAK,WAAU;4CAAa,MAAK;4CAAe,GAAE;;;;;;;;;;;;gCAC/C;;;;;;mCAIR;;;;;;;;;;;;;;;;;;AAMZ;KAvEM;uCAyES"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/components/TransactionHistory.tsx"],"sourcesContent":["import React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface Transaction {\n  id: string;\n  type: 'buy' | 'sell';\n  amount: number;\n  price: number;\n  total: number;\n  timestamp: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface TransactionHistoryProps {\n  transactions: Transaction[];\n  isLoading?: boolean;\n}\n\nconst TransactionHistory: React.FC<TransactionHistoryProps> = ({ \n  transactions, \n  isLoading = false \n}) => {\n  if (isLoading) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">Transaction History</h2>\n        <div className=\"flex justify-center items-center h-40\">\n          <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\"\n    >\n      <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">Transaction History</h2>\n      \n      {transactions.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          No transactions yet\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead className=\"bg-gray-50 dark:bg-gray-700\">\n              <tr>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Type\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Amount\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Price\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Total\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Time\n                </th>\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {transactions.map((transaction) => (\n                <tr key={transaction.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      transaction.type === 'buy' \n                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' \n                        : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                    }`}>\n                      {transaction.type.toUpperCase()}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {transaction.amount.toFixed(8)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    ${transaction.price.toFixed(8)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    ${transaction.total.toFixed(2)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                    {transaction.timestamp}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      transaction.status === 'completed' \n                        ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' \n                        : transaction.status === 'pending'\n                          ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                          : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                    }`}>\n                      {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </motion.div>\n  );\n};\n\nexport default TransactionHistory;\n"],"names":[],"mappings":";;;;AACA;;;AAiBA,MAAM,qBAAwD,CAAC,EAC7D,YAAY,EACZ,YAAY,KAAK,EAClB;IACC,IAAI,WAAW;QACb,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAG,WAAU;8BAAuD;;;;;;8BACrE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;;;;;;;;;;;;;;;;IAIvB;IAEA,qBACE,6LAAC,6LAAA,CAAA,SAAM,CAAC,GAAG;QACT,SAAS;YAAE,SAAS;YAAG,GAAG;QAAG;QAC7B,SAAS;YAAE,SAAS;YAAG,GAAG;QAAE;QAC5B,YAAY;YAAE,UAAU;QAAI;QAC5B,WAAU;;0BAEV,6LAAC;gBAAG,WAAU;0BAAuD;;;;;;YAEpE,aAAa,MAAM,KAAK,kBACvB,6LAAC;gBAAI,WAAU;0BAAoD;;;;;qCAInE,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAM,WAAU;;sCACf,6LAAC;4BAAM,WAAU;sCACf,cAAA,6LAAC;;kDACC,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;kDAG9H,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;kDAG9H,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;kDAG9H,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;kDAG9H,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;kDAG9H,6LAAC;wCAAG,OAAM;wCAAM,WAAU;kDAAoG;;;;;;;;;;;;;;;;;sCAKlI,6LAAC;4BAAM,WAAU;sCACd,aAAa,GAAG,CAAC,CAAC,4BACjB,6LAAC;;sDACC,6LAAC;4CAAG,WAAU;sDACZ,cAAA,6LAAC;gDAAK,WAAW,CAAC,wEAAwE,EACxF,YAAY,IAAI,KAAK,QACjB,sEACA,6DACJ;0DACC,YAAY,IAAI,CAAC,WAAW;;;;;;;;;;;sDAGjC,6LAAC;4CAAG,WAAU;sDACX,YAAY,MAAM,CAAC,OAAO,CAAC;;;;;;sDAE9B,6LAAC;4CAAG,WAAU;;gDAAuE;gDACjF,YAAY,KAAK,CAAC,OAAO,CAAC;;;;;;;sDAE9B,6LAAC;4CAAG,WAAU;;gDAAuE;gDACjF,YAAY,KAAK,CAAC,OAAO,CAAC;;;;;;;sDAE9B,6LAAC;4CAAG,WAAU;sDACX,YAAY,SAAS;;;;;;sDAExB,6LAAC;4CAAG,WAAU;sDACZ,cAAA,6LAAC;gDAAK,WAAW,CAAC,wEAAwE,EACxF,YAAY,MAAM,KAAK,cACnB,sEACA,YAAY,MAAM,KAAK,YACrB,0EACA,6DACN;0DACC,YAAY,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,KAAK,YAAY,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;mCA9BpE,YAAY,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCvC;KAhGM;uCAkGS"}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/components/BotDashboard.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport TransactionHistory from './TransactionHistory';\n\ninterface OrderBookData {\n  lowestSell: number;\n  highestBuy: number;\n  spread: number;\n  lastOrderType: 'buy' | 'sell' | null;\n}\n\ninterface TradeData {\n  time: string;\n  lowestSell: number;\n  highestBuy: number;\n  spread: number;\n}\n\ninterface Transaction {\n  id: string;\n  type: 'buy' | 'sell';\n  amount: number;\n  price: number;\n  total: number;\n  timestamp: string;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface BalanceCardProps {\n  title: string;\n  amount: number;\n  currency: string;\n}\n\ninterface BotDashboardProps {\n  tradingPair: string;\n  isActive: boolean;\n  botId: string;\n}\n\nconst BalanceCard: React.FC<BalanceCardProps> = ({ title, amount, currency }) => (\n  <motion.div\n    whileHover={{ scale: 1.02 }}\n    className=\"bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl p-6 shadow-lg\"\n  >\n    <h3 className=\"text-white text-lg font-medium\">{title}</h3>\n    <p className=\"text-white text-2xl font-bold mt-2\">\n      {amount.toFixed(currency === 'BTCR' || currency === 'BTC' ? 8 : 2)} {currency}\n    </p>\n  </motion.div>\n);\n\nconst BotDashboard: React.FC<BotDashboardProps> = ({ tradingPair, isActive, botId }) => {\n  const [orderBook, setOrderBook] = React.useState<OrderBookData>({\n    lowestSell: 0,\n    highestBuy: 0,\n    spread: 0,\n    lastOrderType: null\n  });\n  const [tradeHistory, setTradeHistory] = React.useState<TradeData[]>([]);\n  const [transactions, setTransactions] = React.useState<Transaction[]>([]);\n  const [balance, setBalance] = React.useState({\n    crypto: 0,\n    usdt: 0,\n  });\n  const [tradingPairInfo, setTradingPairInfo] = React.useState(tradingPair);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [error, setError] = React.useState<string | null>(null);\n  const [authToken, setAuthToken] = React.useState<string | null>(null);\n\n  // Get authentication token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      // Redirect to login if no token found\n      window.location.href = '/login';\n      return;\n    }\n    setAuthToken(token);\n  }, []);\n\n  // Fetch real data from API\n  useEffect(() => {\n    if (!isActive || !authToken) {\n      setIsLoading(false);\n      return;\n    }\n\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        \n        const response = await fetch(`/api/bot-data?botId=${botId}`, {\n          headers: {\n            'Authorization': `Bearer ${authToken}`\n          }\n        });\n        \n        if (response.status === 401) {\n          // Token expired or invalid\n          localStorage.removeItem('auth_token');\n          window.location.href = '/login';\n          return;\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || 'Failed to fetch bot data');\n        }\n        \n        const data = await response.json();\n        \n        if (data.success) {\n          setOrderBook(data.data.orderBook);\n          setTradeHistory(data.data.priceHistory);\n          setTransactions(data.data.transactions);\n          setBalance(data.data.balance);\n          // Use the trading pair from the API response\n          if (data.data.tradingPair) {\n            setTradingPairInfo(data.data.tradingPair);\n          }\n        } else {\n          throw new Error(data.error || 'Failed to fetch bot data');\n        }\n        \n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error instanceof Error ? error.message : 'Unknown error');\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 30000); // Update every 30 seconds\n    return () => clearInterval(interval);\n  }, [botId, isActive, authToken]);\n\n  if (!isActive) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p className=\"text-gray-500 dark:text-gray-400\">\n          This bot is currently inactive. Start the bot to view its dashboard.\n        </p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6 text-center\">\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n          <strong className=\"font-bold\">Error: </strong>\n          <span className=\"block sm:inline\">{error}</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Get the correct crypto currency from the trading pair info\n  const cryptoCurrency = tradingPairInfo.split('/')[0];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n      className=\"p-6 space-y-6\"\n    >\n      {/* Trading Pair Info */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">{tradingPairInfo}</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-green-100 dark:bg-green-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-green-800 dark:text-green-200\">Lowest Sell</p>\n            <p className=\"text-2xl font-bold text-green-800 dark:text-green-200\">${orderBook.lowestSell.toFixed(2)}</p>\n          </div>\n          <div className=\"bg-red-100 dark:bg-red-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-red-800 dark:text-red-200\">Highest Buy</p>\n            <p className=\"text-2xl font-bold text-red-800 dark:text-red-200\">${orderBook.highestBuy.toFixed(2)}</p>\n          </div>\n          <div className=\"bg-blue-100 dark:bg-blue-900/30 p-4 rounded-lg\">\n            <p className=\"text-sm text-blue-800 dark:text-blue-200\">Spread</p>\n            <p className=\"text-2xl font-bold text-blue-800 dark:text-blue-200\">${orderBook.spread.toFixed(2)}</p>\n          </div>\n        </div>\n        <div className=\"mt-4 p-4 bg-gray-100 dark:bg-gray-700/50 rounded-lg\">\n          <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n            Last Order Type: <span className=\"font-bold capitalize\">{orderBook.lastOrderType || 'None'}</span>\n          </p>\n        </div>\n      </div>\n\n      {/* Balance Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <BalanceCard title={`${cryptoCurrency} Balance`} amount={balance.crypto} currency={cryptoCurrency} />\n        <BalanceCard title=\"USDT Balance\" amount={balance.usdt} currency=\"USDT\" />\n      </div>\n\n      {/* Price History Chart */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-gray-800 dark:text-white\">Price History</h2>\n        <div className=\"h-[400px] w-full\">\n          <ResponsiveContainer>\n            <LineChart data={tradeHistory}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n              <XAxis dataKey=\"time\" stroke=\"#9CA3AF\" />\n              <YAxis stroke=\"#9CA3AF\" />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#1F2937',\n                  border: 'none',\n                  borderRadius: '8px',\n                  color: '#F3F4F6'\n                }}\n              />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                name=\"Lowest Sell\"\n                dataKey=\"lowestSell\"\n                stroke=\"#10B981\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n              <Line\n                type=\"monotone\"\n                name=\"Highest Buy\"\n                dataKey=\"highestBuy\"\n                stroke=\"#EF4444\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n              <Line\n                type=\"monotone\"\n                name=\"Spread\"\n                dataKey=\"spread\"\n                stroke=\"#3B82F6\"\n                strokeWidth={2}\n                dot={{ r: 4 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Transaction History */}\n      <TransactionHistory transactions={transactions} />\n\n     \n    </motion.div>\n  );\n};\n\nexport default BotDashboard;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 994, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1000, "column": 0}, "map": {"version":3,"sources":["file://D%3A/auto-trading-bot/fe/src/components/BotManager.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport BotControlPanel from './BotControlPanel';\nimport BotDashboard from './BotDashboard';\n\ninterface BotStatus {\n  running: boolean;\n}\n\ninterface BotAction {\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst BotManager: React.FC = () => {\n  // Bot status\n  const [azbitStatus, setAzbitStatus] = useState<BotStatus>({ running: false });\n  const [p2pb2bStatus, setP2pb2bStatus] = useState<BotStatus>({ running: false });\n  \n  // Loading states for actions\n  const [azbitAction, setAzbitAction] = useState<BotAction>({ isLoading: false, error: null });\n  const [p2pb2bAction, setP2pb2bAction] = useState<BotAction>({ isLoading: false, error: null });\n\n  // Error display\n  const [error, setError] = useState<string | null>(null);\n  \n  // Authentication token\n  const [authToken, setAuthToken] = useState<string | null>(null);\n\n  // Get authentication token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      // Redirect to login if no token found\n      window.location.href = '/login';\n      return;\n    }\n    setAuthToken(token);\n  }, []);\n\n  // Define fetchBotStatus with useCallback to prevent infinite re-renders\n  const fetchBotStatus = useCallback(async (botId: string) => {\n    if (!authToken) return;\n    \n    try {\n      const response = await fetch(`/api/bot?botId=${botId}`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      \n      if (response.status === 401) {\n        // Token expired or invalid\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n        return;\n      }\n      \n      const data = await response.json();\n      \n      if (!response.ok || !data.success) {\n        throw new Error(data.error || `Failed to fetch ${botId} status`);\n      }\n      \n      if (botId === 'azbit') {\n        setAzbitStatus({ running: data.data.running });\n      } else {\n        setP2pb2bStatus({ running: data.data.running });\n      }\n      \n      console.log(`${botId} status:`, data.data.running ? 'Running' : 'Stopped');\n    } catch (error) {\n      console.error(`Error fetching ${botId} status:`, error);\n      // Don't set error state here to avoid UI disruption during polling\n    }\n  }, [authToken]);\n\n  // Fetch bot status on component mount\n  useEffect(() => {\n    if (authToken) {\n      fetchBotStatus('azbit');\n      fetchBotStatus('p2pb2b');\n\n      // Poll for status updates every 10 seconds\n      const interval = setInterval(() => {\n        fetchBotStatus('azbit');\n        fetchBotStatus('p2pb2b');\n      }, 10000);\n\n      return () => clearInterval(interval);\n    }\n  }, [authToken, fetchBotStatus]);\n\n  const handleStartBot = async (botId: string) => {\n    if (!authToken) return;\n    \n    try {\n      // Set loading state\n      if (botId === 'azbit') {\n        setAzbitAction({ isLoading: true, error: null });\n      } else {\n        setP2pb2bAction({ isLoading: true, error: null });\n      }\n      \n      // Clear any previous errors\n      setError(null);\n      \n      const response = await fetch('/api/bot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          action: 'start',\n          botId,\n        }),\n      });\n      \n      if (response.status === 401) {\n        // Token expired or invalid\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n        return;\n      }\n      \n      const data = await response.json();\n      \n      if (!response.ok || !data.success) {\n        throw new Error(data.error || `Failed to start ${botId} bot`);\n      }\n      \n      // Update bot status\n      await fetchBotStatus(botId);\n      \n      console.log(`${botId} bot started successfully`);\n    } catch (error) {\n      console.error(`Error starting ${botId} bot:`, error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred');\n    } finally {\n      // Clear loading state\n      if (botId === 'azbit') {\n        setAzbitAction({ isLoading: false, error: null });\n      } else {\n        setP2pb2bAction({ isLoading: false, error: null });\n      }\n    }\n  };\n\n  const handleStopBot = async (botId: string) => {\n    if (!authToken) return;\n    \n    try {\n      // Set loading state\n      if (botId === 'azbit') {\n        setAzbitAction({ isLoading: true, error: null });\n      } else {\n        setP2pb2bAction({ isLoading: true, error: null });\n      }\n      \n      // Clear any previous errors\n      setError(null);\n      \n      const response = await fetch('/api/bot', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          action: 'stop',\n          botId,\n        }),\n      });\n      \n      if (response.status === 401) {\n        // Token expired or invalid\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n        return;\n      }\n      \n      const data = await response.json();\n      \n      if (!response.ok || !data.success) {\n        throw new Error(data.error || `Failed to stop ${botId} bot`);\n      }\n      \n      // Update bot status\n      await fetchBotStatus(botId);\n      \n      console.log(`${botId} bot stopped successfully`);\n    } catch (error) {\n      console.error(`Error stopping ${botId} bot:`, error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred');\n    } finally {\n      // Clear loading state\n      if (botId === 'azbit') {\n        setAzbitAction({ isLoading: false, error: null });\n      } else {\n        setP2pb2bAction({ isLoading: false, error: null });\n      }\n    }\n  };\n\n  if (!authToken) {\n    return null; // Don't render anything until we have the auth token\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Trading Bot Dashboard</h1>\n        <a href=\"/settings\" className=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors\">\n          API Settings\n        </a>\n      </div>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n          <strong className=\"font-bold\">Error: </strong>\n          <span className=\"block sm:inline\">{error}</span>\n          <button \n            className=\"absolute top-0 bottom-0 right-0 px-4 py-3\"\n            onClick={() => setError(null)}\n          >\n            <span className=\"sr-only\">Close</span>\n            <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n              <title>Close</title>\n              <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"/>\n            </svg>\n          </button>\n        </div>\n      )}\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <BotControlPanel\n          botName=\"Azbit Trading Bot\"\n          botId=\"azbit\"\n          isRunning={azbitStatus.running}\n          isLoading={azbitAction.isLoading}\n          onStart={() => handleStartBot('azbit')}\n          onStop={() => handleStopBot('azbit')}\n        />\n        <BotControlPanel\n          botName=\"P2PB2B Trading Bot\"\n          botId=\"p2pb2b\"\n          isRunning={p2pb2bStatus.running}\n          isLoading={p2pb2bAction.isLoading}\n          onStart={() => handleStartBot('p2pb2b')}\n          onStop={() => handleStopBot('p2pb2b')}\n        />\n      </div>\n\n      {/* Dashboards */}\n      <div className=\"space-y-8\">\n        {azbitStatus.running && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden\">\n            <div className=\"p-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600\">\n              <h2 className=\"text-xl font-bold text-gray-800 dark:text-white\">Azbit Bot Dashboard</h2>\n            </div>\n            <BotDashboard\n              tradingPair=\"BTC/USDT\"\n              isActive={azbitStatus.running}\n              botId=\"azbit\"\n            />\n          </div>\n        )}\n        \n        {p2pb2bStatus.running && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden\">\n            <div className=\"p-4 bg-gray-50 dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600\">\n              <h2 className=\"text-xl font-bold text-gray-800 dark:text-white\">P2PB2B Bot Dashboard</h2>\n            </div>\n            <BotDashboard\n              tradingPair=\"BTCR/USDT\"\n              isActive={p2pb2bStatus.running}\n              botId=\"p2pb2b\"\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BotManager;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1449, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}